OUTPUT:
```
    clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ ./arrayCalculator 
    The min is: -154
    The max is: 193
    The sum is: 410
    The average is: 29
    clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ 
```

PROGRAM:
3 utility functions, min | max | sum-avg ; all void returns - they modify global variables header file has, and take array


LOG: 
10/4/2025: Read Program requirements and scaffolded files
10/6/2025: Wrote code and completed assignment requirements

WRITE-UP:

PART ONE:
- Compiling: 
```
    gcc -S min.c
    gcc -S max.c
    gcc -S sum-avg.c
    gcc -S arrayCalculator.c

    as min.s -o min.o
    as max.s -o max.o
    as sum-avg.s -o sum-avg.o
    as arrayCalculator.s -o arrayCalculator.o

    ld -dynamic-linker /lib64/ld-linux-x86-64.so.2 \
    /usr/lib/x86_64-linux-gnu/Scrt1.o \
    /usr/lib/x86_64-linux-gnu/crti.o \
    min.o max.o sum-avg.o arrayCalculator.o \
    -lc \
    /usr/lib/x86_64-linux-gnu/crtn.o
```

- Reading
Using readelf, we can get the required information

- readelf -s a.out (symbol table)
    - gets us:
        - Min()
            - size 98
            - address 0000000000401076
        - Max()
            - size 98
            - address 00000000004010d8
        - SumAndAvg()
            - size 93
            - address 000000000040113a
        - main()
            - size 153
            - address 0000000000401197
        - stdio linked (found by UND)
            - __libc_start_mai
            - printf
- readelf -h a.out 
    - gets us: 
        - Entry Point: 0x401050

- readelf -S a.out (Section Headers)
       ```
            clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ readelf -S a.out 
            There are 28 section headers, starting at offset 0x35b0:

            Section Headers:
            [Nr] Name              Type             Address           Offset
                Size              EntSize          Flags  Link  Info  Align
            [ 0]                   NULL             0000000000000000  00000000
                0000000000000000  0000000000000000           0     0     0
            [ 1] .interp           PROGBITS         00000000004002e0  000002e0
                000000000000001c  0000000000000000   A       0     0     1
            [ 2] .note.gnu.pr[...] NOTE             0000000000400300  00000300
                0000000000000030  0000000000000000   A       0     0     8
            [ 3] .note.ABI-tag     NOTE             0000000000400330  00000330
                0000000000000020  0000000000000000   A       0     0     4
            [ 4] .hash             HASH             0000000000400350  00000350
                0000000000000024  0000000000000004   A       6     0     8
            [ 5] .gnu.hash         GNU_HASH         0000000000400378  00000378
                000000000000001c  0000000000000000   A       6     0     8
            [ 6] .dynsym           DYNSYM           0000000000400398  00000398
                0000000000000060  0000000000000018   A       7     1     8
            [ 7] .dynstr           STRTAB           00000000004003f8  000003f8
                000000000000004a  0000000000000000   A       0     0     1
            [ 8] .gnu.version      VERSYM           0000000000400442  00000442
                0000000000000008  0000000000000002   A       6     0     2
            [ 9] .gnu.version_r    VERNEED          0000000000400450  00000450
                0000000000000030  0000000000000000   A       7     1     8
            [10] .rela.dyn         RELA             0000000000400480  00000480
                0000000000000030  0000000000000018   A       6     0     8
            [11] .rela.plt         RELA             00000000004004b0  000004b0
                0000000000000018  0000000000000018  AI       6    21     8
            [12] .init             PROGBITS         0000000000401000  00001000
                000000000000001b  0000000000000000  AX       0     0     4
            [13] .plt              PROGBITS         0000000000401020  00001020
                0000000000000020  0000000000000010  AX       0     0     16
            [14] .plt.sec          PROGBITS         0000000000401040  00001040
                0000000000000010  0000000000000010  AX       0     0     16
            [15] .text             PROGBITS         0000000000401050  00001050
                00000000000001e0  0000000000000000  AX       0     0     16
            [16] .fini             PROGBITS         0000000000401230  00001230
                000000000000000d  0000000000000000  AX       0     0     4
            [17] .rodata           PROGBITS         0000000000402000  00002000
                0000000000000048  0000000000000000   A       0     0     4
            [18] .eh_frame         PROGBITS         0000000000402048  00002048
                00000000000000f0  0000000000000000   A       0     0     8
            [19] .dynamic          DYNAMIC          0000000000403e38  00002e38
                00000000000001a0  0000000000000010  WA       7     0     8
            [20] .got              PROGBITS         0000000000403fd8  00002fd8
                0000000000000010  0000000000000008  WA       0     0     8
            [21] .got.plt          PROGBITS         0000000000403fe8  00002fe8
                0000000000000020  0000000000000008  WA       0     0     8
            [22] .data             PROGBITS         0000000000404020  00003020
                0000000000000064  0000000000000000  WA       0     0     32
            [23] .bss              NOBITS           0000000000404084  00003084
                000000000000000c  0000000000000000  WA       0     0     4
            [24] .comment          PROGBITS         0000000000000000  00003084
                000000000000002b  0000000000000001  MS       0     0     1
            [25] .symtab           SYMTAB           0000000000000000  000030b0
                0000000000000300  0000000000000018          26    10     8
            [26] .strtab           STRTAB           0000000000000000  000033b0
                0000000000000116  0000000000000000           0     0     1
            [27] .shstrtab         STRTAB           0000000000000000  000034c6
                00000000000000e6  0000000000000000           0     0     1
            Key to Flags:
            W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
            L (link order), O (extra OS processing required), G (group), T (TLS),
            C (compressed), x (unknown), o (OS specific), E (exclude),
            D (mbind), l (large), p (processor specific)
            clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ 
        ```

PART TWO:
- compiling: -o : gcc arrayCalculator.c min.c max.c sum-avg.c -o arrayCalculator
```
    clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ gcc arrayCalculator.c min.c max.c sum-avg.c -o arrayCalculator
    clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ ./arrayCalculator 
    The min is: -154
    The max is: 193
    The sum is: 410
    The average is: 29
    clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ 
```
- Reading
Using readelf, we can get the required information

- readelf -s a.out (symbol table)
    - gets us: (size is the same!)
        - Min()
            - size 98 
            - address 00000000000011e2
        - Max()
            - size 98
            - address 0000000000001244
        - SumAndAvg() 
            - size 93
            - address 00000000000012a6
        - main()
            - size 153
            - address 0000000000001149
        - stdio linked (found by UND)
            - __libc_start_mai
            - printf
            - __cxa_finalize@G
- readelf -h a.out 
    - gets us: 
        - Entry Point: 0x1060

- readelf -S a.out (Section Headers)
    - data: 
    ```
        clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ readelf -S arrayCalculator 
        There are 31 section headers, starting at offset 0x3860:

        Section Headers:
        [Nr] Name              Type             Address           Offset
            Size              EntSize          Flags  Link  Info  Align
        [ 0]                   NULL             0000000000000000  00000000
            0000000000000000  0000000000000000           0     0     0
        [ 1] .interp           PROGBITS         0000000000000318  00000318
            000000000000001c  0000000000000000   A       0     0     1
        [ 2] .note.gnu.pr[...] NOTE             0000000000000338  00000338
            0000000000000030  0000000000000000   A       0     0     8
        [ 3] .note.gnu.bu[...] NOTE             0000000000000368  00000368
            0000000000000024  0000000000000000   A       0     0     4
        [ 4] .note.ABI-tag     NOTE             000000000000038c  0000038c
            0000000000000020  0000000000000000   A       0     0     4
        [ 5] .gnu.hash         GNU_HASH         00000000000003b0  000003b0
            0000000000000024  0000000000000000   A       6     0     8
        [ 6] .dynsym           DYNSYM           00000000000003d8  000003d8
            00000000000000a8  0000000000000018   A       7     1     8
        [ 7] .dynstr           STRTAB           0000000000000480  00000480
            000000000000008f  0000000000000000   A       0     0     1
        [ 8] .gnu.version      VERSYM           0000000000000510  00000510
            000000000000000e  0000000000000002   A       6     0     2
        [ 9] .gnu.version_r    VERNEED          0000000000000520  00000520
            0000000000000030  0000000000000000   A       7     1     8
        [10] .rela.dyn         RELA             0000000000000550  00000550
            00000000000000c0  0000000000000018   A       6     0     8
        [11] .rela.plt         RELA             0000000000000610  00000610
            0000000000000018  0000000000000018  AI       6    24     8
        [12] .init             PROGBITS         0000000000001000  00001000
            000000000000001b  0000000000000000  AX       0     0     4
        [13] .plt              PROGBITS         0000000000001020  00001020
            0000000000000020  0000000000000010  AX       0     0     16
        [14] .plt.got          PROGBITS         0000000000001040  00001040
            0000000000000010  0000000000000010  AX       0     0     16
        [15] .plt.sec          PROGBITS         0000000000001050  00001050
            0000000000000010  0000000000000010  AX       0     0     16
        [16] .text             PROGBITS         0000000000001060  00001060
            00000000000002a3  0000000000000000  AX       0     0     16
        [17] .fini             PROGBITS         0000000000001304  00001304
            000000000000000d  0000000000000000  AX       0     0     4
        [18] .rodata           PROGBITS         0000000000002000  00002000
            0000000000000048  0000000000000000   A       0     0     4
        [19] .eh_frame_hdr     PROGBITS         0000000000002048  00002048
            000000000000004c  0000000000000000   A       0     0     4
        [20] .eh_frame         PROGBITS         0000000000002098  00002098
            000000000000010c  0000000000000000   A       0     0     8
        [21] .init_array       INIT_ARRAY       0000000000003db8  00002db8
            0000000000000008  0000000000000008  WA       0     0     8
        [22] .fini_array       FINI_ARRAY       0000000000003dc0  00002dc0
            0000000000000008  0000000000000008  WA       0     0     8
        [23] .dynamic          DYNAMIC          0000000000003dc8  00002dc8
            00000000000001f0  0000000000000010  WA       7     0     8
        [24] .got              PROGBITS         0000000000003fb8  00002fb8
            0000000000000048  0000000000000008  WA       0     0     8
        [25] .data             PROGBITS         0000000000004000  00003000
            0000000000000064  0000000000000000  WA       0     0     32
        [26] .bss              NOBITS           0000000000004064  00003064
            000000000000000c  0000000000000000  WA       0     0     4
        [27] .comment          PROGBITS         0000000000000000  00003064
            000000000000002b  0000000000000001  MS       0     0     1
        [28] .symtab           SYMTAB           0000000000000000  00003090
            0000000000000480  0000000000000018          29    21     8
        [29] .strtab           STRTAB           0000000000000000  00003510
            0000000000000235  0000000000000000           0     0     1
        [30] .shstrtab         STRTAB           0000000000000000  00003745
            000000000000011a  0000000000000000           0     0     1
        Key to Flags:
        W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
        L (link order), O (extra OS processing required), G (group), T (TLS),
        C (compressed), x (unknown), o (OS specific), E (exclude),
        D (mbind), l (large), p (processor specific)
        clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ 
```

PART THREE:
- compiling: -o : gcc arrayCalculator.c min.c max.c sum-avg.c -o arrayCalculator
```
    clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ gcc arrayCalculator.c min.c max.c sum-avg.c -o arrayCalculator
    clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ ./arrayCalculator 
    The min is: -154
    The max is: 193
    The sum is: 410
    The average is: 29
    clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ 
```
- Reading
Using readelf, we can get the required information

- readelf -s a.out (symbol table)
    - gets us: (sizes are different)
        - Min()
            - size 100 
            - address 00000000000011f1
        - Max()
            - size 100
            - address 0000000000001255
        - SumAndAvg() 
            - size 96
            - address 00000000000012b9
        - main()
            - size 168
            - address 0000000000001149
        - stdio linked (found by UND)
            - __libc_start_mai
            - printf
            - __cxa_finalize@G
- readelf -h a.out 
    - gets us: 
        - Entry Point: 0x1060

- readelf -S a.out (Section Headers)
    - data: 
```
        clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ readelf -S arrayCalculator 
        There are 31 section headers, starting at offset 0x3860:

        Section Headers:
        [Nr] Name              Type             Address           Offset
            Size              EntSize          Flags  Link  Info  Align
        [ 0]                   NULL             0000000000000000  00000000
            0000000000000000  0000000000000000           0     0     0
        [ 1] .interp           PROGBITS         0000000000000318  00000318
            000000000000001c  0000000000000000   A       0     0     1
        [ 2] .note.gnu.pr[...] NOTE             0000000000000338  00000338
            0000000000000030  0000000000000000   A       0     0     8
        [ 3] .note.gnu.bu[...] NOTE             0000000000000368  00000368
            0000000000000024  0000000000000000   A       0     0     4
        [ 4] .note.ABI-tag     NOTE             000000000000038c  0000038c
            0000000000000020  0000000000000000   A       0     0     4
        [ 5] .gnu.hash         GNU_HASH         00000000000003b0  000003b0
            0000000000000024  0000000000000000   A       6     0     8
        [ 6] .dynsym           DYNSYM           00000000000003d8  000003d8
            00000000000000a8  0000000000000018   A       7     1     8
        [ 7] .dynstr           STRTAB           0000000000000480  00000480
            000000000000008f  0000000000000000   A       0     0     1
        [ 8] .gnu.version      VERSYM           0000000000000510  00000510
            000000000000000e  0000000000000002   A       6     0     2
        [ 9] .gnu.version_r    VERNEED          0000000000000520  00000520
            0000000000000030  0000000000000000   A       7     1     8
        [10] .rela.dyn         RELA             0000000000000550  00000550
            00000000000000c0  0000000000000018   A       6     0     8
        [11] .rela.plt         RELA             0000000000000610  00000610
            0000000000000018  0000000000000018  AI       6    24     8
        [12] .init             PROGBITS         0000000000001000  00001000
            000000000000001b  0000000000000000  AX       0     0     4
        [13] .plt              PROGBITS         0000000000001020  00001020
            0000000000000020  0000000000000010  AX       0     0     16
        [14] .plt.got          PROGBITS         0000000000001040  00001040
            0000000000000010  0000000000000010  AX       0     0     16
        [15] .plt.sec          PROGBITS         0000000000001050  00001050
            0000000000000010  0000000000000010  AX       0     0     16
        [16] .text             PROGBITS         0000000000001060  00001060
            00000000000002b9  0000000000000000  AX       0     0     16
        [17] .fini             PROGBITS         000000000000131c  0000131c
            000000000000000d  0000000000000000  AX       0     0     4
        [18] .rodata           PROGBITS         0000000000002000  00002000
            0000000000000048  0000000000000000   A       0     0     4
        [19] .eh_frame_hdr     PROGBITS         0000000000002048  00002048
            000000000000004c  0000000000000000   A       0     0     4
        [20] .eh_frame         PROGBITS         0000000000002098  00002098
            000000000000010c  0000000000000000   A       0     0     8
        [21] .init_array       INIT_ARRAY       0000000000003db8  00002db8
            0000000000000008  0000000000000008  WA       0     0     8
        [22] .fini_array       FINI_ARRAY       0000000000003dc0  00002dc0
            0000000000000008  0000000000000008  WA       0     0     8
        [23] .dynamic          DYNAMIC          0000000000003dc8  00002dc8
            00000000000001f0  0000000000000010  WA       7     0     8
        [24] .got              PROGBITS         0000000000003fb8  00002fb8
            0000000000000048  0000000000000008  WA       0     0     8
        [25] .data             PROGBITS         0000000000004000  00003000
            0000000000000064  0000000000000000  WA       0     0     32
        [26] .bss              NOBITS           0000000000004064  00003064
            000000000000000c  0000000000000000  WA       0     0     4
        [27] .comment          PROGBITS         0000000000000000  00003064
            000000000000002b  0000000000000001  MS       0     0     1
        [28] .symtab           SYMTAB           0000000000000000  00003090
            0000000000000480  0000000000000018          29    21     8
        [29] .strtab           STRTAB           0000000000000000  00003510
            0000000000000235  0000000000000000           0     0     1
        [30] .shstrtab         STRTAB           0000000000000000  00003745
            000000000000011a  0000000000000000           0     0     1
        Key to Flags:
        W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
        L (link order), O (extra OS processing required), G (group), T (TLS),
        C (compressed), x (unknown), o (OS specific), E (exclude),
        D (mbind), l (large), p (processor specific)
        clivemiller@Simnm:~/code/c-code/assignments/2230_assigment_1$ 
```
